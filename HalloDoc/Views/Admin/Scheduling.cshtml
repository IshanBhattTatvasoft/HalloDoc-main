@model HalloDoc.DataLayer.ViewModels.SchedulingViewModel
@{
    ViewData["Title"] = "Scheduling";
}

@section Styles{
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.6/dist/sweetalert2.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
}

@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
            crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.6/dist/sweetalert2.all.min.js"></script>
    <partial name="_ValidationScriptsPartial" />
}

<style>
    .dark-green-button {
        background: #943db8;
    }

    .region-dropdown {
        border: 1px solid rgb(211, 210, 210);
        padding: 8px;
        border-radius: 8px;
        padding-left: 12px;
    }

    .fc-timeline-slot-frame {
        text-decoration: none !important;
    }

    .fc-scrollgrid-sync-inner {
        text-decoration: none !important;
    }

    .fc-timeline-event {
        height: 40px !important;
        font-weight: 400 !important;
    }

    .fc-event-main-frame {
        display: flex !important;
        flex-wrap: wrap !important;
        text-align: center !important;
    }

    .fc-event-time {
        margin: auto !important;
        font-weight: 400 !important;
    }

    .fc th {
        color: white;
        background-color: dimgray;
    }

    .fc-event-title{
        white-space: wrap;
    }

    #calendar .fc-timeline-slot-cushion, .fc-col-header-cell-cushion {
        text-decoration: none;
        color: white;
    }

    .fc-daygrid-day-top {
        background-color: #ffacf5;
        justify-content: center;
    }

    .fc-daygrid-day-number {
        text-decoration: none;
        color: ActiveCaption;
    }

    .fc-event-time, .fc-event-title {
        color: ActiveCaption;
    }

    .fc-event {
        margin-top: 1px !important;
    }

    .fc-license-message{
        display: none;
    }

    .fc-datagrid-cell-main {
        display: flex !important;
        flex-direction: row-reverse !important;
        justify-content: flex-end !important;
        align-items: center !important;
    }

        .fc-datagrid-cell-main img {
            width: 40px;
            height: 40px;
            margin-right: 2px;
        }
</style>

<body class="bg-light">
    <div class="bg-light" style="overflow: hidden;">
        <partial name="HeaderFooter" model="@Model.adminNavbarModel" />
        <partial name="Toast" />
        <div class="container">
            <div class="row">
                <div style="top: 42px; position: relative;" class="col">
                    <a class="float-end text-info mx-auto" id="backdesign" asp-controller="Admin" asp-action="AdminDashboard" style="text-decoration: none;margin-right: 243px;border: 1px solid; border-radius: 7px; height: 40px;display: flex;align-items: center;justify-content: center;padding: 4px 4px 4px 1px;width: 69px;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor"
                             class="bi bi-chevron-left" viewBox="0 0 16 16">
                            <path fill-rule="evenodd"
                                  d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0" />
                        </svg>
                        Back
                    </a>
                </div>

                <div class="row">
                    <div class="col mt-2">
                        <p class="h5 text-muted fw-bold" id="heading-one">
                            Scheduling
                        </p>
                    </div>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-3">
                    <select class="form-select mb-3 update1" id="Role" asp-for="regionId" onchange="filter()">
                        <option value="0" selected>All Regions</option>
                        @foreach (var item in Model.allRegions)
                        {
                            <option value="@item.RegionId">@item.Name</option>
                        }
                    </select>
                </div>
                <div class="col">
                    <div class="flex-grow-1 text-end">
                        <a type="button" class="btn btn-info text-white me-4 w-auto" asp-action="MDsOnCall" asp-controller="Admin">Providers On Call</a>
                        <a type="button" class="btn btn-info text-white me-4 w-auto" asp-action="RequestedShifts" asp-controller="Admin">Shift For Review</a>
                        <button type="button" class="btn btn-info text-white w-auto" data-bs-toggle="modal" data-bs-target="#exampleModal">Add New Shift</button>
                    </div>
                </div>
            </div>

            <div>
                <div class="d-flex justify-content-between flex-wrap mt-4 mb-4">
                    <div>
                        <h5 id="calendarTitle"></h5>
                    </div>
                    <div class="flex-grow-1 text-end">
                        <div class="d-flex justify-content-end">
                            <div class="align-items-center d-flex me-3">
                                <span class="border rounded-2 border-danger d-inline-block me-2" style="width:50px; height:30px; background-color:#edacd2 !important"></span>
                                <span>Pending Shift</span>
                            </div>
                            <div class="align-items-center d-flex">
                                <span class="border rounded-2 border-success d-inline-block me-2" style="width:50px; height:30px; background-color:#a5cfa6 !important"></span>
                                <span>Approved Shift</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <div class="d-flex justify-content-between flex-wrap mt-4 mb-4">
                    <div class="d-flex">
                        <button class="btn bg-info text-white rounded-pill me-2" onclick="calendarPrev()"><i class="bi bi-chevron-left"></i></button>
                        <i class="bi bi-calendar3 mt-2" onclick="calendarToday()"></i>
                        <button class="btn bg-info text-white rounded-pill ms-2" onclick="calendarNext()"><i class="bi bi-chevron-right"></i></button>
                    </div>
                    <div class="flex-grow-1 text-end">
                        <div class="d-flex justify-content-end">
                            <input type="radio" class="btn-check" name="options-base" id="Day" autocomplete="off" onclick="changeView('resourceTimeline')" checked>
                            <label class="btn btn-outline-info" for="Day">Day</label>
                            <input type="radio" class="btn-check" name="options-base" id="Week" autocomplete="off" onclick="changeView('resourceTimelineWeek')">
                            <label class="btn btn-outline-info mx-2" for="Week">Week</label>
                            <input type="radio" class="btn-check" name="options-base" id="Month" autocomplete="off" onclick="changeView('dayGridMonth')">
                            <label class="btn btn-outline-info" for="Month">Month</label>
                        </div>
                    </div>
                </div>
            </div>

            <div id="calendar"></div>


        </div>
    </div>

    <div id="CreateShift"></div>
    <div id="ViewShift"></div>

    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog  modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-info text-white">
                    <h1 class="modal-title fs-5 " id="exampleModalLabel">Create Shift</h1>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <form method="post" asp-action="CreateNewShift" asp-controller="Admin">

                        <div class="form-floating mb-3">
                            <select class="form-select" id="select-region" asp-for="regionId" onchange="fetchRegionData()">
                                <option selected disabled value="-1">Select a region</option>
                                @for (int y = 0; y < Model.allRegions.Count; y++)
                                {
                                    <option value="@Model.allRegions[y].RegionId"> @Model.allRegions[y].Name</option>
                                }
                            </select>
                            <label for="floatingSelect">Region</label>
                            <span asp-validation-for="regionId" class="text-danger"></span>
                        </div>

                        <div class="form-floating mb-3">
                            <select class="form-select mb-3" id="select-physician" asp-for="physicianId">
                                <option disabled selected>Select From Below Physicians</option>
                            </select>
                            <label for="floatingSelect">Physician</label>
                            <span asp-validation-for="physicianId" class="text-danger"></span>
                        </div>

                        <div class="form-floating mb-3">
                            <input type="date" id="uname" class="form-control" placeholder="Date Of Birth" asp-for="startDate"
                                   onfocus="(this.type='date')" />
                            <label for="floatingInput" class="dm">ShiftDate</label>
                            <span asp-validation-for="startDate" class="text-danger"></span>
                        </div>

                        <div class="row g-2">
                            <div class="col-md col-12">
                                <div class="form-floating mb-3">
                                    <input type="time" class="form-control" id="startTime" placeholder="start" asp-for="startTime">
                                    <label for="startTime" class="dm">Start</label>
                                    <span asp-validation-for="startTime" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md col-12">
                                <div class="form-floating mb-3">
                                    <input type="time" class="form-control" id="endTime" placeholder="end" asp-for="endTime">
                                    <label for="endTime" class="dm">End</label>
                                    <span asp-validation-for="endTime" class="text-danger endTime-error"></span>
                                </div>
                            </div>
                            <div class="form-check form-switch mb-2 ms-2">
                                <label class="form-check-label me-1" for="flexSwitchCheckChecked">Repeat</label>
                                <input class="form-check-input  check" type="checkbox" role="switch" id="flexSwitchCheckChecked" checked>
                            </div>
                        </div>
                        <div id="days" class="mt-2 mb-2">
                            <p class="mx-3">Repeat Days</p>
                            <div class="d-flex flex-row  ">
                                <div class="p-2 ">
                                    <div class="form-check">
                                        <input class="form-check-input ischeck" type="checkbox" value="0" id="flexCheckDefault" name="RepeatedDays">
                                        <label class="form-check-label" for="flexCheckDefault">Every Sunday</label>
                                    </div>
                                </div>
                                <div class="p-2">
                                    <div class="form-check">
                                        <input class="form-check-input ischeck" type="checkbox" value="1" id="flexCheckChecked" name="RepeatedDays">
                                        <label class="form-check-label" for="flexCheckDefault">Every Monday</label>
                                    </div>
                                </div>
                                <div class="p-2">
                                    <div class="form-check">
                                        <input class="form-check-input ischeck" type="checkbox" value="2" id="flexCheckDefault" name="RepeatedDays">
                                        <label class="form-check-label" for="flexCheckDefault">Every Tuesday</label>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex flex-row  ">
                                <div class="p-2">
                                    <div class="form-check">
                                        <input class="form-check-input ischeck" type="checkbox" value="3" id="flexCheckDefault" name="RepeatedDays">
                                        <label class="form-check-label" for="flexCheckDefault">Every Wednesday</label>

                                    </div>
                                </div>
                                <div class="p-2">
                                    <div class="form-check">
                                        <input class="form-check-input ischeck" type="checkbox" value="4" id="flexCheckChecked" name="RepeatedDays">
                                        <label class="form-check-label" for="flexCheckDefault">Every Thursday</label>
                                    </div>
                                </div>
                                <div class="p-2">
                                    <div class="form-check">
                                        <input class="form-check-input ischeck" type="checkbox" value="5" id="flexCheckDefault" name="RepeatedDays">
                                        <label class="form-check-label" for="flexCheckDefault">Every Friday</label>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex flex-row  ">
                                <div class="p-2">
                                    <div class="form-check">
                                        <input class="form-check-input ischeck" type="checkbox" value="6" id="flexCheckDefault" name="RepeatedDays">
                                        <label class="form-check-label" for="flexCheckDefault">Every Saturday</label>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-floating mb-3" id="RepeatTime">
                            <select class="form-select" id="floatingSelect" aria-label="Floating label select example" asp-for="repeat">
                                <option value="0" selected disabled>Repeat</option>
                                <option value="2">2 times</option>
                                <option value="3">3 times</option>
                                <option value="4">4 times</option>
                            </select>
                            <label for="floatingSelect">Repeat End</label>
                            <span asp-validation-for="repeat" class="text-danger"></span>
                        </div>
                        <input type="hidden" id="selectedDays" name="selectedDays">
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-info" onclick="AddSelectedDays()">Save</button>
                            <button type="button" class="btn btn-outline-info" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</body>

<script src="https://cdn.jsdelivr.net/npm/fullcalendar-scheduler@6.1.11/index.global.min.js"></script>

<script>

    function addCustomRow() {
        // Get the container element for the resources
        const resourceContainer = document.querySelector('.fc-datagrid-body');

        // Get the number of columns in the resource view
        const columnCount = document.querySelectorAll('.fc-datagrid-cell.fc-datagrid-cell-main').length;
        const colCount = 10;
        // Create a new row element
        const newRow = document.createElement('div');
        newRow.classList.add('fc-datagrid-row', 'fc-resource-row', 'fc-datagrid-row-custom'); // Add custom class for styling
        newRow.innerHTML = `
            <div class="fc-datagrid-cell fc-datagrid-cell-main fc-resource-cell-custom" colspan="${columnCount}">
                Coverage
            </div>`; // Set colspan to span across all columns

        // Insert the new row at the top of the resource container
        resourceContainer.insertBefore(newRow, resourceContainer.firstChild);
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Call the function to add the custom row after FullCalendar renders
        addCustomRow();
    });




    var calendar;
    GetCalendar(0);
    function GetCalendar(RegionId) {
        var calendarEl = document.getElementById('calendar');
        calendar = new FullCalendar.Calendar(calendarEl, {
            height: 'auto',
            //schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',
            themeSystem: 'bootstrap5',
            headerToolbar: false,
            initialView: 'resourceTimeline',
            eventDisplay: 'block',
            datesSet: function (info) {
                var title = info.view.title;
                $("#calendarTitle").html(title);
            },
            resourceAreaColumns: [{
                headerContent: 'Staff',
            }],
            eventTimeFormat: {
                hour: 'numeric', 
                minute: '2-digit', 
                meridiem: 'short' 
            },

            eventClick: function (info, jsEvent, view) {
                ViewShift(info.event.id);
            },
            views: {
                resourceTimelineWeek: {

                    slotDuration: { days: 1 },
                    slotLabelFormat: { weekday: 'short', day: 'numeric', week: 'long' }
                }
            },
            resourceLabelDidMount: function (resourceObj) {
                const img = document.createElement('img');
                img.src = resourceObj.resource.extendedProps.imageUrl || "/images/doctor-person.png";
                img.style.maxHeight = '40px';
                resourceObj.el.querySelector('.fc-datagrid-cell-main').appendChild(img);
            },
            resources: "/Admin/GetProviderDetailsForSchedule?RegionId=" + RegionId,
            events: "/Admin/GetScheduleData",
        });
        calendar.render();
        calendar.addResource({
            id: 'new_resource_id', // Unique ID for the new resource
            title: 'New Resource', // Title for the new resource
            extendedProps: {
                imageUrl: '/images/new_resource_image.png' // Optional: image URL for the new resource
            }
        }, {
            beforeRender: function (renderInfo) {
                // Move the new resource to the top
                if (renderInfo.resource.id === 'new_resource_id') {
                    renderInfo.resource.moveBefore(renderInfo.resources.get('resource_id_of_first_resource'));
                }
            }
        });
    }
    let calendarNext = () => calendar.next();
    let calendarPrev = () => calendar.prev();
    let calendarToday = () => calendar.today();
    let changeView = (type) => calendar.changeView(type);

    // filtering based on region
    function filter()
    {
        var regionId = document.getElementById("Role").value;

        $.ajax({
            url: '/Admin/GetProviderDetailsForSchedule',
            datatype: 'html',
            data: { RegionId : regionId},
            success: function(response){
                GetCalendar(regionId);
            },
            error: function(response){
                alert("An error occurred");
            }
        });
    }

    
    // View shift data
    function ViewShift(ShiftDetailId) {
        $.ajax({
            type: "GET",
            url: "/Admin/ViewShift",
            data: { ShiftDetailId },
            success: function (data) {
                $("#ViewShift").html(data);
                $("#ViewShiftModal").modal("show");
            },
            error: function (data) {
                toastr.error("Cannot Fetch Shift Details");
            }
        });
    }


    function fetchRegionData() {
        const selectedRegionId = document.getElementById("select-region").value;

        $.ajax({
            url: '/Admin/GetPhysicianByRegion',
            type: 'GET',
            // stores RegionId in regionId variable and this variable is passed to the controller
            data: { regionId: selectedRegionId },
            success: function (data) {
                // to remove the previously present physicians selected based on a different region
                $("#select-physician").empty();
                $("#select-physician").append('<option value="" disabled selected>Select Physician</option>');

                // Add each matched physician to the select element
                $.each(data, function (index, physician) {
                    $("#select-physician").append('<option class="physician-dropdown" value="' + physician.physicianId + '">' + physician.firstName + '</option>');
                });
            },

            error: function (error) {
                console.error("Error fetching data:", error);
            }
        });
    }

    // store days whose checkbox is checked
    function AddSelectedDays() {
        console.log("hello");
        var selectedRegions = [];
        document.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {

            selectedRegions.push(parseInt(checkbox.value));

        });

        if (selectedRegions.length > 0) {
            document.getElementById('selectedDays').value = selectedRegions.join(',');
        } else {
            document.getElementById('selectedDays').value = '';
        }
        console.log("hello");
    }

    // show checkbox and no.of times if we click on repeat
    $(document).ready(function () {
        $('.check').click(function () {
            var isChecked = $(this).prop('checked');
            if (isChecked) {
                $('#days').show();
                $('#RepeatTime').show();
            } else {
                $('.ischeck').prop('checked', false);
                $('#RepeatTime').val('0');
                $('#days').hide();
                $('#RepeatTime').hide();
            }
        });
    });

    // do not allow to fetch past dates
    const dobInput = document.getElementById("uname");

    dobInput.addEventListener("focus", function () {
        this.type = "date";
        const today = new Date();
        const minDate = today.toISOString().split('T')[0];  // Extract YYYY-MM-DD format
        console.log("Minimum Date:", minDate); // Check the extracted date in console
        this.setAttribute("min", minDate);
    });

    // calculate minimum end time from the start time and check if satisfies the condition or not. If not, show error message
    document.addEventListener("DOMContentLoaded", function () {
        const startTimeInput = document.getElementById("startTime");
        const endTimeInput = document.getElementById("endTime");
        const endTimeErrorSpan = document.querySelector(".endTime-error"); // Reference the error message element

        startTimeInput.addEventListener("change", function () {
            const selectedStartTime = this.value;
            if (selectedStartTime) {
                const minEndTime = calculateMinEndTime(selectedStartTime);
                endTimeInput.setAttribute("min", minEndTime);
                endTimeInput.value = ""; // Clear previous end time selection
            } else {
                endTimeInput.removeAttribute("min"); // Remove restriction if start time is cleared
            }
        });

        endTimeInput.addEventListener("change", function () {
            const selectedEndTime = this.value;
            const selectedStartTime = startTimeInput.value;

            if (selectedStartTime && selectedEndTime) {
                if (!isEndTimeValid(selectedStartTime, selectedEndTime)) {
                    this.value = ""; // Clear invalid end time
                    endTimeErrorSpan.textContent = "End Time must be after Start Time with at least a 30-minute gap"; // Display error message
                    endTimeErrorSpan.style.display = "block"; // Show the error message
                } else {
                    endTimeErrorSpan.textContent = ""; // Clear error message if valid
                    endTimeErrorSpan.style.display = "none"; // Hide the error message
                }
            } else {
                endTimeErrorSpan.textContent = ""; // Clear error message if no start or end time
                endTimeErrorSpan.style.display = "none"; // Hide the error message
            }
        });

        function calculateMinEndTime(startTime) {
            const timeParts = startTime.split(":");
            const hour = parseInt(timeParts[0]);
            const minute = parseInt(timeParts[1]);

            // Add 30 minutes to start time, handling minute overflow
            let newMinute = minute + 30;
            let newHour = hour;

            if (newMinute >= 60) {
                newMinute -= 60;
                newHour++;
            }

            // Format the minimum end time string (HH:mm)
            return `${newHour.toString().padStart(2, "0")}:${newMinute.toString().padStart(2, "0")}`;
        }

        function isEndTimeValid(startTime, endTime) {
            const startTimeParts = startTime.split(":");
            const endTimeParts = endTime.split(":");

            const startHour = parseInt(startTimeParts[0]);
            const startMinute = parseInt(startTimeParts[1]);

            const endHour = parseInt(endTimeParts[0]);
            const endMinute = parseInt(endTimeParts[1]);

            // Check if end time is after start time
            if (endHour < startHour || (endHour === startHour && endMinute <= startMinute)) {
                return false;
            }

            // Calculate the time difference (minutes)
            const timeDiff = (endHour - startHour) * 60 + (endMinute - startMinute);

            return timeDiff >= 30; // Check if difference is at least 30 minutes
        }
    });

</script>