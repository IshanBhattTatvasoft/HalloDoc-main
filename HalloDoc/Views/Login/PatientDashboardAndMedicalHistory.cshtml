@model HalloDoc.DataLayer.ViewModels.DashboardViewModel
@using static HalloDoc.DataLayer.Models.Enums;
@{
    ViewData["Title"] = "PatientDashboardAndMedicalHistory";
    Layout = "_Layout";
}

<Partial name="_Notification" />
@section Styles {
    <link href="~/css/patient-dashboard-and-medical-history.css" rel="stylesheet" type="text/css" />
    <link href="~/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
}

@section Scripts {
    <script src="~/js/bootstrap.bundle.min.js"></script>
}

<style>
    textarea {
        resize: none !important;
    }

    .chat-messages {
        list-style-type: none;
        padding: 0;
        margin: 5px;
    }

    *::-webkit-scrollbar {
        width: 9px;
    }

    *::-webkit-scrollbar-track {
        background: #fcfcfc;
    }

    *::-webkit-scrollbar-thumb {
        background-color: #5a6263;
        border-radius: 10px;
        border: 3px solid #ffffff;
    }

    .chat-message {
        padding: 10px 10px;
        margin-bottom: 5px;
        border-bottom-left-radius: 8px;
    }

    .outgoing {
        background-color: #dcf8c640;
        border: 2px solid #eaeaea94;
        width: max-content;
        align-self: flex-end;
    }

    .incoming {
        background-color: #e4faff;
        border: 2px solid #d6eaff;
        width: max-content;
        align-self: flex-start;
    }

    .timeOnLeft {
        align-self: flex-start;
    }

    .timeOnRight {
        align-self: flex-end;
    }

    input:focus {
        outline: #3DB6FF !important;
        /*border: 2px solid white !important;*/
        box-shadow: none !important;
        border-color: #3DB6FF !important;
        /*color: red !important;*/
    }

    textarea:focus {
        outline: none !important;
        border-color: #3DB6FF !important;
        box-shadow: none !important;
    }
</style>

<div style="overflow-x: hidden; overflow-y: auto;">
    <partial name="Toast" />
    <partial name="PatientNavbar" model="@Model.an" />

    <div class="d-flex flex-column bg-light" style="margin: 5px auto; padding: 0px 35px;">
        <div class="bg-light">
            <div class="me-5 py-5 px-3">
                <p class="h4 text-muted">Medical History</p>
            </div>
        </div>

        <div class="mx-3 border rounded">
            <div class="bg-white d-sm-flex d-none justify-content-end">
                <button type="button" class="btn btn-outline-info me-4 my-2" data-bs-toggle="modal"
                        data-bs-target="#exampleModal" style="padding-top: 5px;">
                    Create New Request
                </button>
            </div>

            <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="crossbutton modal-header bg-info">
                            <h1 class="modal-title text-white fs-5" id="exampleModalLabel">Create New Request</h1>
                            <button type="button" class="crossss btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            Here, I want to create a new request for...

                            <div class="text-center">
                                <button type="button" class="btn btn_dash selected" id="me-link" onclick="toggleMe()">Me</button>
                                <a asp-action="RequestForMe" id="me_link"></a>

                                <button type="button" class="btn btn_dash" id="else-link" onclick="toggleElse()">Someone Else</button>
                                <a asp-action="RequestForSomeoneElse" id="else_link"></a>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-info" onclick="selectForm()">Continue</button>
                            <button type="button" class="btn btn-outline-info" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="table-responsive d-none d-sm-flex">
                <table class="table mb-0">
                    <thead class="table-secondary ms-2">
                        <tr>
                            <th scope="col">Created Date <i class="fa-solid fa-arrow-down"></i></th>
                            <th scope="col">Current Status</th>
                            <th scope="col">Chat With</th>
                            <th scope="col">Document</th>
                        </tr>
                    </thead>
                    <tbody class="ms-2">
                        @if (Model.Requests != null)
                        {
                            @foreach (var obj in Model.Requests)
                            {
                                var i = 0;


                                @*Message Offcanvas - Patient to Admin*@
                                <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasSide0" aria-labelledby="offcanvasSideLabel">

                                    <div class="offcanvas-header bg-info text-light">
                                        <h4 class="text-white" id="offcanvasSideLabel">Chat</h4>
                                        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                                    </div>

                                    <div class="offcanvas-body" id="ChatContainer">
                                        <div class="Chat-Container">
                                            <ul id="messagesList0" class="chat-messages d-flex flex-column">
                                            </ul>
                                        </div>
                                    </div>

                                    <div class="offcanvas-bottom">
                                        <form id="messageForm0">
                                            <div class="d-flex gap-2">
                                                <div class="form-floating" style="width:310px;">
                                                    <textarea class="form-control overflow-y-hidden" placeholder="Type A Message" id="messageInput0-@(obj.RequestId)-Patient" onkeydown="checkEnterButton(event)"></textarea>
                                                    <label for="messageInput">Type A Message</label>
                                                </div>
                                                <button type="submit" class="btn btn-info text-white" onclick="ViewMessage('0','@obj.RequestId'); return false;" id="sendMessageButton0"><i class="bi bi-send m-2"></i></button>
                                            </div>
                                        </form>
                                    </div>

                                </div>


                                <tr>
                                    <td>
                                        @obj.CreatedDate.ToString("MMM dd, yyyy")
                                    </td>

                                    <td>
                                        @Enum.GetName(typeof(Status), obj.Status)
                                    </td>

                                    <td>
                                        <button class="btn btn-outline-info" data-bs-toggle="offcanvas" data-bs-target="#offcanvasSide0" aria-controls="offcanvasSide" onclick="setRecevierId('0', 'Admin')"><i class="fa-regular fa-user me-2"></i>Admin</button>
                                        @if (obj.PhysicianId != null)
                                        {
                                            <button class="btn btn-outline-info" data-bs-toggle="offcanvas" data-bs-target="#offcanvasSide@(Model.User.Id)" aria-controls="offcanvasSide" onclick="setRecevierId('@obj.PhysicianId', 'Provider')"><i class="fa-solid fa-user-doctor me-2"></i>Provider</button>

                                            <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasSide@(Model.User.Id)" aria-labelledby="offcanvasSideLabel">

                                                <div class="offcanvas-header bg-info text-light">
                                                    <h4 class="text-white" id="offcanvasSideLabel">Chat</h4>
                                                    <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close" data-bs-backdrop="false"></button>
                                                </div>

                                                <div class="offcanvas-body" id="ChatContainer">
                                                    <div class="Chat-Container">
                                                        <ul id="messagesList@(obj.Physician.AspNetUserId)" class="chat-messages d-flex flex-column">
                                                        </ul>
                                                    </div>
                                                </div>

                                                <div class="offcanvas-bottom">
                                                    <form id="messageForm@(Model.User.Id)">
                                                        <div class="d-flex gap-2">
                                                            <div class="form-floating" style="width:310px;">
                                                                <textarea class="form-control overflow-y-hidden" placeholder="Type A Message" id="messageInput@(obj.Physician.AspNetUserId)-@(obj.RequestId)-Patient" onkeydown="checkEnterButton(event)"></textarea>
                                                                <label for="messageInput">Type A Message</label>
                                                            </div>
                                                            <button type="submit" class="btn btn-info text-white" onclick="ViewMessage('@obj.Physician.AspNetUserId', '@obj.RequestId'); return false;" id="sendMessageButton@(Model.User.Id)"><i class="bi bi-send m-2"></i></button>
                                                        </div>
                                                    </form>
                                                </div>

                                            </div>
                                        }
                                    </td>

                                    <td>
                                        @if (obj.RequestId != null && (obj.Status == 8 || obj.Status == 9))
                                        {
                                            var fileCount = Model.RequestsAndFiles.Count(rf => rf.RequestId == obj.RequestId);
                                            <a style="border:1px solid #00ccff;padding:6px;margin:auto;  color:#00ccff;border-radius:5px; text-decoration: none;" asp-controller="Login" asp-action="PatientDashboardViewDocuments" asp-route-id="@obj.RequestId">(@fileCount) Documents</a>
                                        }

                                    </td>

                                </tr>
                                i++;
                            }
                        }
                    </tbody>
                </table>
                
            </div>



            <!-- Accordion part (for mobile view) -->
            <div class="bg-white mt-0">
                <div class="d-flex justify-content-end d-sm-none mx-3 py-3">
                    <button type="button" class="btn btn-outline-info" data-bs-toggle="modal"
                            data-bs-target="#centeredModal">
                        +
                    </button>
                </div>
                <div class="accordion accordion-flush d-sm-none" id="accordionFlushExample">
                    @foreach (var obj in Model.Requests)
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="flush-heading@(obj.RequestId)">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                        data-bs-target="#flush-collapse(@obj.RequestId)"
                                        aria-expanded="false" aria-controls="flush-collapse(@obj.RequestId)" style="background-color: #E5EEF5;">
                                    <img src="~/images/clock.svg" alt="" class="accordion-img"> <span class="accordion-heading">
                                        <span class="ms-2">
                                            Created
                                            Date:
                                        </span><span class="accordion-value">@obj.CreatedDate.ToString("MMM dd, yyyy")</span>
                                    </span>
                                </button>
                            </h2>
                            <div id="flush-collapse(@obj.RequestId)" class="accordion-collapse collapse" aria-labelledby="flush-heading@(obj.RequestId)"
                                 data-bs-parent="#accordionFlushExample">
                                <div class="accordion-body main-flex" style="background-color: #E5EEF5;">
                                    <div style="position: relative;">
                                        <div class="inner-flex mb-2">
                                            <img src="~/images/person-circle.svg" alt="" class="accordion-img-inner">
                                            <span class="accordion-heading-inner">
                                                Provider :
                                                @if (obj.RequestId != null)
                                                {
                                                    var x = Model.phy.FirstOrDefault(p => p.PhysicianId == obj.PhysicianId);
                                                    <span class="accordion-value-inner">
                                                        @if (x != null)
                                                        {
                                                            <span>Dr. @x.FirstName</span>
                                                        }
                                                        else
                                                        {
                                                            <span>-</span>
                                                        }
                                                    </span>
                                                }

                                            </span>
                                        </div>
                                        <div class="inner-flex mb-2">
                                            <img src="~/images/success-26.svg" alt="" class="accordion-img-inner" style="height: 15px; width: 15px"> <span class="accordion-heading-inner">
                                                Current
                                                Status: <span class="accordion-value-inner">

                                                </span>
                                            </span>
                                        </div>
                                        <div style="margin-top: 4px;">
                                            @if (obj.RequestId != null && (obj.Status == 8 || obj.Status == 9))
                                            {
                                                var fileCount = Model.RequestsAndFiles.Count(rf => rf.RequestId == obj.RequestId);
                                                <a class="w-100 text-center" style="border:1px solid #00ccff;padding:3px;margin-top: 3px;  color:#00ccff;border-radius:5px; text-decoration: none; height: 31px;display: inline-block;" asp-controller="Login" asp-action="PatientDashboardViewDocuments" asp-route-id="@obj.RequestId" style="text-decoration: none;">(@fileCount) Documents</a>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>


    </div>

    <script>

        function changeBackgroundColor(radioButtonId) {
            var radioButton = document.getElementById(radioButtonId);
            if (radioButton.checked) {
                radioButton.parentElement.classList.add('active');
            } else {
                radioButton.parentElement.classList.remove('active');
            }
        }

        // to add or remove create-request-active page
        const toggleButton = (redirect_page) => {
            const buttons = document.getElementsByClassName("common-btn")
            for (let i = 0; i < buttons.length; ++i) {
                if (buttons[i].classList.length == 5) {
                    buttons[i].classList.remove('create-request-active')
                }
                else {
                    buttons[i].classList.add('create-request-active')
                }
            }
            document.getElementById("redirect-value").value = redirect_page;
        }


        var btn_me = document.getElementById("me-link");
        var btn_else = document.getElementById("else-link");
        var link_me = document.getElementById("me_link");
        var link_else = document.getElementById("else_link");

        function toggleMe() {
            if (btn_me.classList.contains("selected")) {
                btn_else.classList.remove("selected");
            }
            else {
                btn_me.classList.add("selected");
                btn_else.classList.remove("selected");
            }
        }

        function toggleElse() {
            if (btn_else.classList.contains("selected")) {
                btn_me.classList.remove("selected");
            }
            else {
                btn_me.classList.remove("selected");
                btn_else.classList.add("selected");
            }
        }

        function selectForm() {

            if (btn_me.classList.contains("selected")) {
                link_me.click();
            }
            else {
                link_else.click();
            }
        }

        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
        var loggedInUser, lastUser, lastTime, uniqueId;

        connection.on("ReceiveMessage", function (senderId, requestId, user, message) {
            debugger;
            console.log(senderId, requestId, user, message);
            let senderName = user;

            const messagesList = document.getElementById(`messagesList${senderId}`);
            // create new element to show message in it
            const listItem = document.createElement("li");
            // get current time
            const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            listItem.classList.add("chat-message");

            if (message.length > 19) {
                listItem.style.width = "50%";
            }
            listItem.style.wordWrap = "break-word";
            listItem.classList.add("d-block");
            const checkName = document.getElementById("userName").innerText;
            console.log("User: " + senderName);
            console.log("Check name: " + checkName);
            listItem.classList.add(senderName === checkName ? "outgoing" : "incoming");
            listItem.classList.add("mt-2");
            listItem.textContent = `${message}`;


            // create element to show username and time or only time
            const userName = document.createElement("small");
            if (senderName == loggedInUser) {
                userName.textContent = `${currentTime}`;
            }
            else {
                userName.textContent = `${senderName}, ${currentTime}`;
            }
            console.log(userName.textContent);
            userName.classList.add("d-block");
            userName.style.fontSize = "12px";
            userName.classList.add("text-muted");
            userName.classList.add(senderName === checkName ? "timeOnRight" : "timeOnLeft");
            userName.classList.add("mt-2");


            // show username and time if user who has sent the message is not same as the logged in user OR message sent time is not equal to current time
            if (lastUser != senderName || lastTime != currentTime) {
                messagesList.appendChild(userName);
            }
            messagesList.appendChild(listItem);
            scrollToBottom();
            lastUser = user;
            lastTime = currentTime;
            //uniqueId = id;
        });

        function checkEnterButton(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                document.getElementById(`sendMessageButton${uniqueId}`).click();
            }
        }

        function scrollToBottom() {
            let messages = document.getElementById('ChatContainer');
            messages.scrollTop = messages.scrollHeight;
        }

        function setRecevierId(id) {
            uniqueId = id;
        }

        connection.start().catch(err => console.error(err.toString()));

        function ViewMessage(aspId, reqId) {
            console.log(aspId);
            var user = document.getElementById("userName").innerText;
            var message = document.getElementById(`messageInput${aspId}-${reqId}-Patient`).value;
            console.log(message);
            loggedInUser = user;
            //uniqueId = aspId;
            user = user + "#" + aspId;
            if (message.trim() != '') {
                connection.invoke("SendMessage", aspId, reqId, user, message, receiverRoleName)
                    .then(() => {
                        const listItem = document.createElement("li");
                        listItem.classList.add("chat-message");
                        listItem.classList.add("d-block");
                        listItem.classList.add("outgoing");
                        listItem.textContent = message;
                        const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                        const username = document.createElement("small");
                        const messagesList = document.getElementById(`messagesList${aspId}`);
                        username.classList.add("d-block");
                        username.style.fontSize = "12px";
                        username.classList.add("text-muted");
                        username.classList.add("timeOnRight");
                        username.textContent = `${user}`;
                        scrollToBottom();
                        messagesList.appendChild(username);
                        messagesList.appendChild(listItem);
                    })
                    .catch(err => console.error(err.toString()));
                document.getElementById(`messageInput${aspId}-${reqId}-Patient`).value = "";
            }
        }

        var receiverRoleName;
        function setRecevierId(id, role) {
            uniqueId = id;
            receiverRoleName = role;
        }

    </script>

</div>
